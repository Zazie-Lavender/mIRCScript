[script]
n0=;Mongblocker allows us to track mongs and dynamically ignore them based on activity. 
n1=;Each ignore is a 15 minute block, which should be unevadable based on their current address.
n2=;The Mong Blocker is meant to allow for idiots/spammers to be ignored for as long as we want,
n3=;without cluttering up the ignore list unnecessarily or having a huge list we can't manage
n4=;If we want an existing MongBlocker mask ignore to stick we just unset the -u (unset in) parameter in the
n5=;address book's ignore list.
n6=;With the correct masks however, you can detect your least favorite mongs and auto-ignore them
n7=;whenever they pop up...no matter what they change about their client info.
n8=;In future versions, we may pull a /who to determine their realname and match this...however
n9=;this will only allow detection of existing mongs if you specified their realname when adding them
n10=;Not sure how easily mIRC gets and stores GECOS info natively.
n11=;deduplicated some commands. Easier to debug if we're calling an alias to do what we need, we can debug that alias and debug entire script
n12=;Disabled the echo on detect, as this was more of a debug line than anything else. Code has been considered stable enough to not ignore innocents
n13=
n14=on ^mong:text:*:*: { 
n15=  mongblock $nick
n16=  ;echo -a 6Mong Detected! $nick matches Mong List Entry: $ulist($fulladdress,mong,1) Reason: $ulist($fulladdress,mong,1).info ( $+ $network $+ )
n17=  automong $nick Auto
n18=  ;Have an addmong line here to refresh their listings and add their new identities to the list if they match one of our masks
n19=  ;mIRC shouldn't have any duplication issues; it will just list what we attempted to add to the userlist, thus providing information
n20=  ;should we decide to later run an /addmongmask command.
n21=}
n22=;Differentiate between Added Mong blocks and "Automatic" blocks, we couldn't really track this before;
n23=;addmong adds one =mong and 3 =monga entries.
n24=;addmongmask adds only the =mong entry you specify
n25=;automong adds all 4 as =monga entries which get deleted if we see the user leaving IRC.
n26=;We will also be adding an alias to flush out =monga entries. 
n27=
n28=on ^monga:text:*:* {
n29=  mongblock $nick
n30=  automong $nick Auto
n31=}
n32=
n33=;Clean up when mongs leave IRC.
n34=on ^monga:quit: {
n35=  ruser =mong $nick 10
n36=  ruser =mong $nick 18
n37=  ruser =mong $nick 0
n38=  ruser =mong $nick 17
n39=}
n40=
n41=on ^monga:part:#: {
n42=  ruser =mong $nick 10
n43=  ruser =mong $nick 18
n44=  ruser =mong $nick 0
n45=  ruser =mong $nick 17
n46=}
n47=
n48=on ^monga:kick:#: {
n49=  ruser =mong $knick 10
n50=  ruser =mong $knick 18
n51=  ruser =mong $knick 0
n52=  ruser =mong $knick 17
n53=}
n54=
n55=;Disabling maskpattern 2 from ignore commands because it might unnecessarily constrain innocent users. 
n56=;A similar risk lies with maskpattern 12 but is less likely.
n57=;replaced maskpattern 2 with 10
n58=;replaced maskpattern 4 with 14, 12 with 18, and 14 with 17 (Hopefully these will faithfully hit our targets through nickchanges.)
n59=
n60=alias ActMong { hdump ActMongs }
n61=
n62=alias addmong {
n63=  guser =mong $$1 10 $2-
n64=  guser =monga $$1 18 $2-
n65=  guser =monga $$1 0 $2-
n66=  guser =monga $$1 17 $2-
n67=  mongblock $$1
n68=  hadd -mu900 ActMongs $$1 $ulist($fulladdress,mong,1) $ulist($fulladdress,mong,1).info $network
n69=}
n70=
n71=alias automong {
n72=  guser =monga $$1 10 $2-
n73=  guser =monga $$1 18 $2-
n74=  guser =monga $$1 0 $2-
n75=  guser =monga $$1 17 $2-
n76=  hadd -mu900 ActMongs $$1 $ulist($fulladdress,mong,1) $ulist($fulladdress,mong,1).info $network
n77=}
n78=
n79=alias amflush { rlevel =monga }
n80=
n81=alias mongblock {
n82=  ignore -pntcdiku900 $1 $network
n83=  ignore -pntcdiku900 $1 10 $network 
n84=  ignore -pntcdiku900 $1 18 $network 
n85=  ignore -pntcdiku900 $1 17 $network 
n86=}
n87=
n88=alias addmongmask {
n89=  auser =mong $$1-
n90=}
n91=
n92=alias delmong {
n93=  ruser =mong $$1
n94=  ruser =monga $$1
n95=}
n96=
n97=on *:EXIT: { 
n98=  amflush
n99=}
