[script]
n0=;;Here we just redirect /notices to the active window and handle special cases like ##werewolf's where we want bot notices to also be added 
n1=;;to a window
n2=#noticehandler on
n3=on ^*:notice:*:?: { 
n4=
n5=  echo -a --> < $+ $nick $+ > $1-
n6=  if ($nick == lykos) { /wn <lykos> $1- }
n7=}
n8=
n9=on ^*:text:*:?:{ 
n10=  if ($nick == %safenick) { aline -p @safepm $nick > $1- }
n11=}
n12=#noticehandler end
n13=
n14=;; % [ $+ [ $# ] ] (for appending together variables)
n15=;;This is where we handle raw IRC numerics and route them appropriately. For example we want to suppress certain events and keep them from spamming
n16=;;the server windows with extra information we don't really need.
n17=#rawhandlers on
n18=;;Cache the version reply so we can match against it later and define script behaviors based on ircd behavior by matching against
n19=;;the server's own version reply as some servers may reply differently or have different behaviors for commands.
n20=raw 005:*: {
n21=  set % [ $+ [ $network ] ] % [ $+ [ $network ] ] $1- 
n22=}
n23=;;stop NAMES spamming the server window...we're also caching it in a hashtable as well so we can search against it later.
n24=;;on ^*:join:#: { names $chan } ;;update names list on join
n25=raw 353:*: { 
n26=  ;;echo -s $1-
n27=  hinc -m [ $+($cid,.,$3) ] i
n28=  hadd -m [ $+($cid,.,$3) ] [ NameBuffer $+ [ $hget($+($cid,.,$3),i) ] ] $4-
n29=  haltdef
n30=}
n31=raw 366:*: {
n32=  haltdef 
n33=}
n34=
n35=;;Ping times to server.
n36=on *:connect: { timer 0 60 /tickping }
n37=on *:PONG: { 
n38=  if ($1 == $server) {
n39=    echo -s RTT(Ticks): $calc($ticks - $2) RTT(Sec): $calc($calc($ticks - $2) / 1000) 
n40=    set [ %lag $+ [ $network ] ] $calc($calc($ticks - $2) / 1000)
n41=    haltdef
n42=  }
n43=}
n44=
n45=;;Better Error handling, so we know when we accidentally send a command the server doesn't understand. 
n46=;;We may also try to shoehorn in some sort of lagtime measurements here, but I don't see why we should as /ping and server's pong works too
n47=raw 421:*: { 
n48=  echo -a ( Server ) 421: $2 $+ : $3-
n49=  haltdef
n50=}
n51=
n52=;;caching names data
n53=alias nametable {
n54=  var %i $hget($+($cid,.,$$1),i)
n55=  while (%i > 0) {
n56=    echo -a $$1 > $+(#,%i) > $+(NameBuffer,%i) > $hget($+($cid,.,$$1),$+(NameBuffer,%i))
n57=    dec %i
n58=  }
n59=}
n60=
n61=alias ntn {
n62=  if (isid) { 
n63=    return $hget($+($cid,.,$$1),$+(NameBuffer,$$2)) 
n64=    halt
n65=  }
n66=  echo -a $$1 > $$2 > $+(NameBuffer,$$2) > $hget($+($cid,.,$$1),$+(NameBuffer,$$2))
n67=}
n68=#rawhandlers end
n69=
n70=
n71=;; Smarter handling of sticky channels. We tell the client to send /detach for stuck chans. This gets us *out* of the channel quietly.
n72=;; Obviously, if you stick a channel; it must be added to %sticky so we know which channels to behave this way too. We may actually 
n73=;; need to add a bouncer detection too; but this can come later and we can just copy %sticky to %oldsticky and unset %sticky if we're connecting 
n74=;; directly instead of with the bouncer like normal. or we could just use a group. 
n75=
n76=#ZNCTweaks on
n77=alias part {
n78=  if ($1 isin %sticky) {
n79=    /detach $1
n80=  }
n81=  else { part $1- }
n82=}
n83=
n84=on me:ctcpreply:ZNC*: {
n85=  echo -a reply > $1-
n86=  if ($1) {
n87=    echo -a ZNC Detected!
n88=  }
n89=}
n90=#ZNCTweaks end
n91=
n92=#Notifyfix on
n93=alias monitor {
n94=  if ($network isin %nomon) {
n95=    watch $1-
n96=  }
n97=  else { monitor $1- }
n98=}
n99=
n100=#Notifyfix end
n101=
n102=#umodeghandler on
n103=;;Auto-accept users on voice in ##werewolf. 
n104=on ^*:voice:##werewolf: {
n105=  if ($vnick isin [ % $+ [ $network $+ . $+ accept ] ]) { halt }
n106=  /accept $vnick 
n107=  /accept *
n108=}
n109=;;Opers have auto /accept
n110=on ^*:voice:#freenode: {
n111=  if ($vnick isin [ % $+ [ $network $+ . $+ accept ] ]) { halt }
n112=  /accept $vnick 
n113=  /accept *
n114=}
n115=;;Freenode won't track nick changes for accept lists.
n116=on ^*:nick: { 
n117=  if ($newnick isin [ % $+ [ $network $+ . $+ accept ] ]) { halt }
n118=  if ($newnick isvoice ##werewolf) { /accept $newnick | /accept * }
n119=  if ($newnick isvoice #freenode) { /accept $newnick | /accept * }
n120=}
n121=raw 718:*: {
n122=  if ($2 ischan) { /accept $2 | /accept * }
n123=}
n124=raw 281:*: { set [ % $+ [ $network $+ . $+ accept ] ] $2- }
n125=#umodeghandler end
