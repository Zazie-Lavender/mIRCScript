[script]
n0=#ZNCAuth on
n1=;;Automated authentication code. Cleaned up for git upload...changed hardcoded params to variables.
n2=
n3=;Detect bad shutdowns and toggle a variable bit for them. If we're having issues where we're connected to the last server, we can run the strapfix.
n4=;While we can disable this behavior from mIRC; I'm not going to include that fix here; we're not going to enforce mIRC settings from script. 
n5=;We've also included a manual detect for the condition, you can remove that 
n6=;' || (%network != %BouncerNet0))' 
n7=;and the first parenthesis from the if statement if you don't want it.
n8=
n9=on ^*:exit: { unset %unsafe }
n10=
n11=;on ^*:disconnect: { if ($network == freenode) { exit -r } }
n12=
n13=raw 464:*: {
n14=  if ($server == %BouncerSvr) {
n15=    ;;Changed hardcoded user/password to a referenced variable for Github upload.
n16=    quote pass $+(%BouncerUsr,:,$decode(%BouncerPwd,m))
n17=    ;echo -a <---DEBUG---> Got connect to bouncer
n18=    timestamp -e on
n19=    set %network $scon(0)
n20=    set %unsafe 1
n21=    if (%cooldown == 1) {
n22=      echo -a 6,4Blocked Bootstrap Command. Cooldown Active
n23=      halt
n24=    }
n25=    /timer 1 2 /bootstrap
n26=    set -u300 %cooldown 1
n27=  }
n28=}
n29=#ZNCAuth end
n30=
n31=#wolfgame on
n32=on ^*:text:*:##werewolf: { if ($nick == lykos) { /wn <#lykos> $1- } }
n33=
n34=alias wn {
n35=  window -dDe2k0 @wolf /wn
n36=  aline -p @wolf $$1-
n37=}
n38=#wolfgame end
n39=
n40=#ZNCAutoCon on
n41=;;Bootstrap Autoconnect.
n42=
n43=alias bootstrap {
n44=  ;;Check to see if we've been called recently
n45=
n46=  set -u60 %cooldown 1
n47=  echo -a Node 0
n48=  ;;This performs the basic autoconnect and spawns the new server connections
n49=  ;We force each node to check and see if it is connected to the correct network,
n50=  ;and fire off the connection only if the network is missing
n51=
n52=  if ($scon(1).network == %BouncerNet0) {
n53=    if ($scon(2).$network != %BouncerNet1) {
n54=      ;echo -a Node 1
n55=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet1,:,$decode(%BouncerPwd,m))
n56=      var %c =1
n57=    }
n58=    if ($scon(3).$network != %BouncerNet2) {
n59=      ;echo -a Node 2
n60=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet2,:,$decode(%BouncerPwd,m))
n61=      var %c =1
n62=    }
n63=    if ($scon(4).$network != %BouncerNet3) {
n64=      ;echo -a Node 3
n65=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet3,:,$decode(%BouncerPwd,m))
n66=      var %c = 1
n67=    }
n68=    if ($scon(5).$network != %BouncerNet4n) {
n69=      ;There's a little disconnect between network name configured on bouncer and on server configs. 
n70=      ;%BouncerNet4n only contains the network name the server is relaying to us.
n71=      ;echo -a Node 4
n72=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet4,:,$decode(%BouncerPwd,m))
n73=      var %c = 1
n74=    }
n75=    if (%c = 1) {
n76=      ;echo -a Node 5
n77=      timer 1 5 /echo -a 5Launched timers to close off commonly spawned windows that are unnecessary
n78=      timer 1 15 /scid -a /close -m *ctcpflood
n79=      timer 1 119 /scid -a /znc clearallchannelbuffers
n80=      timer 1 120 /scid -a /close -m *status
n81=    }
n82=    else { echo -a 12,13Doing nothing, all servers are connected }
n83=  }
n84=}
n85=#ZNCAutoCon end
n86=
n87=#MassCommands on
n88=alias mping {
n89=  var %sel $sline($chan,0)
n90=  var %del 1
n91=  while (%sel > 0) {
n92=    /timer 1 %del /ctcp $sline($chan,%sel) PING
n93=    dec %sel 
n94=    inc %del
n95=  }
n96=}
n97=#MassCommands end
n98=
n99=#utilities on
n100=
n101=alias hdump {
n102=  var %i $hget($$1,0).item
n103=  while (%i > 0) {
n104=    echo -a $1 > %i > $hget($1,%i).item > $hget($1,%i).data
n105=    dec %i
n106=  }
n107=}
n108=
n109=alias htables {
n110=  var %i $hget(0)
n111=  while (%i > 0) {
n112=    echo -a %i > $hget(%i)
n113=    dec %i
n114=  }
n115=}
n116=
n117=#utilities end
n118=
n119=#dogesoak off
n120=
n121=on ^*:text:*:#dogecoin {
n122=  if ($nick != CodicAI) {
n123=    hadd -m SFC LastSpeak $nick
n124=    hinc -mz SFC LineScore $iif($nick isin %sfctrolls,10,$iif($nick = $hget(SFC,LastSpeak),5,3))
n125=    if ($hget(SFC,LineScore) < 10) { 
n126=      echo -a 0,7Linescore is within acceptable parameters 
n127=      msg #dogecoin-silent 0,7Linescore is within acceptable parameters @ $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n128=        trolls and fails to keep the silence add 10s)
n129=    }
n130=  }
n131=}
n132=
n133=on CAI:text:DED*:#dogecoin {
n134=  hinc -mu3600 SFC Count
n135=  echo -a 6,4RUINED IT: $hget(SFC,LastSpeak) @ $4 seconds left > Linescore is $hget(SFC,LineScore)
n136=  msg #dogecoin-silent No. $+ $hget(SFC,Count) 6,4RUINED IT: $hget(SFC,LastSpeak) @ $4 seconds left > Linescore is $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) >
n137=  if ($hget(SFC,LineScore) < 11) { 
n138=    echo -a 0,7Linescore is within acceptable parameters 
n139=    msg #dogecoin-silent 0,7Linescore is within acceptable parameters @ $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n140=      trolls and fails to keep the silence add 10s)
n141=  }
n142=  hinc -mz SFC LineScore 10
n143=}
n144=
n145=on CAI:text:*minutes*:#dogecoin {
n146=  hadd -u30 SFC LineScore 0
n147=}
n148=
n149=alias ls {
n150=  echo -a Linescore is $hget(SFC,LineScore)
n151=}
n152=
n153=alias lsb {
n154=  echo -a Linescore is $hget(SFC,LineScore)
n155=  msg #dogecoin-silent Linescore is $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n156=    trolls and fails to keep the silence add 10s)
n157=}
n158=
n159=alias ta {
n160=  set %sfctrolls %sfctrolls $$1
n161=  echo -a 2Troll List: %sfctrolls
n162=}
n163=
n164=;;on ^*:text:*:#dogecoin: { 
n165=;;var %r $r(1,25)
n166=;;var %e $r(1,25)
n167=;;if ((%r == %e) && (%nospam != 1)) {
n168=;;//msg $chan $gettok(%p,%e,44)
n169=;;//echo -a #dogecoin -> $gettok(%p,%e,44)
n170=;;//set $eval($+(-u,$r(2880,3000))) %nospam 1
n171=;;inc %dsexec
n172=;;}
n173=;;}
n174=
n175=#dogesoak end
n176=
n177=#miscaliases on
n178=
n179=alias tkq { return Use, but never overuse IRC, then you will also be happy within IRC } 
n180=alias tkk { kick $$1 $2 $tkq }
n181=
n182=alias tk { kick $chan $$1 $tkq }
n183=
n184=alias idlebotirc {
n185=  noop $$?="Did you Log out of the Web client? (no input) = no"
n186=  timer 1 2 /part #idlebot
n187=  echo -a Please wait One Minute, as this script completes the idlebot administrative task
n188=  timer 1 8 /nick Zazie_Lavender
n189=  timer 1 16 /join #idlebot
n190=  timer 1 24 /msg IdleMaster $$?1="Idle Command 1 - (!idle-*)" $$?="Command Verb and Params"
n191=  timer 1 28 /msg IdleMaster $?1="Idle Command 2 - (!idle-*)" $?="Command Verb and Params"
n192=  timer 1 32 /msg IdleMaster $?1="Idle Command 3 - (!idle-*)" $?="Command Verb and Params"
n193=  timer 1 36 /msg IdleMaster $?1="Idle Command 4 - (!idle-*)" $?="Command Verb and Params"
n194=  timer 1 40 /part #idlebot
n195=  timer 1 50 /nick Melody\Concerto
n196=  timer 1 60 /join #idlebot
n197=  echo -a Script complete. Idlebot IRC commands sent.
n198=}
n199=alias rnick {
n200=  return $fline($chan,*,$r(1,$line($chan,0,1)),1).text
n201=}
n202=#miscaliases end
n203=
n204=#operkey on
n205=alias F2 {
n206=  var %user %operu. [ $+ [ $network ] ]
n207=  var %pass %operp. [ $+ [ $network ] ]
n208=  if (!%user) { 
n209=    /echo -a 4,11NO O:LINES CONFIGURED FOR $network $+ ! 
n210=    halt
n211=  }
n212=  oper $decode(%user,m) $decode(%pass,m)
n213=}
n214=#operkey end
